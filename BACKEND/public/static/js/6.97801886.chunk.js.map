{"version":3,"sources":["shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Map","props","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","ref","className","style","PlaceItem","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","process","id","Authorization","token","onDelete","useHistory","push","Fragment","ErrorModal","onClear","LoadingSpinner","asOverlay","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","coordinates","inverse","danger","Card","src","image","alt","title","description","userId","creatorId","to","PlaceList","items","length","place","key","creator","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","responseData","places","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"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","file":"static/js/6.97801886.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\r\n\r\nimport './Map.css';\r\n\r\nconst Map = props => {\r\n  const mapRef = useRef();\r\n  const { center, zoom } = props;\r\n  useEffect(() => {\r\n    const map = new window.google.maps.Map(mapRef.current, {\r\n      center: center,\r\n      zoom: zoom\r\n    });\r\n    new window.google.maps.Marker({position: center, map: map});\r\n\r\n  }, [center, zoom]);\r\n\r\n\r\n  return (\r\n    <div\r\n    ref={mapRef} \r\n    className={`map ${props.className}`}\r\n    style={props.style}>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n\r\n","import React, { useState, useContext } from 'react';\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport Modal from '../../shared/components/UIElements/Modal';\r\nimport Map from '../../shared/components/UIElements/Map';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport { useHttpClient } from '../../shared/components/hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport './PlaceItem.css';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nconst PlaceItem = props => {\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const auth = useContext(AuthContext);\r\n  const [showMap, setShowMap] = useState(false);\r\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n\r\n  const openMapHandler = () => { setShowMap(true) }\r\n\r\n  const closeMapHandler = () => { setShowMap(false) }\r\n\r\n  const showDeleteWarningHandler = () => {\r\n    setShowConfirmModal(true);\r\n  };\r\n\r\n  const cancelDeleteHandler = () => {\r\n    setShowConfirmModal(false);\r\n  };\r\n\r\n  const confirmDeleteHandler = async () => {\r\n    setShowConfirmModal(false);\r\n    try {\r\n      await sendRequest(\r\n      process.env.REACT_APP_BACKEND_URL + `/places/${props.id}`,\r\n        'DELETE',\r\n        null,\r\n        {\r\n          Authorization: 'Bearer '+ auth.token\r\n        })\r\n        props.onDelete(props.id);\r\n        useHistory.push('/');\r\n    } catch (err) {}\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      { isLoading && <LoadingSpinner asOverlay/> }\r\n      <Modal \r\n      show={showMap} \r\n      onCancel={closeMapHandler} \r\n      header={props.address} \r\n      contentClass=\"place-item__modal-content\"\r\n      footerClass=\"place-item__modal-actions\"\r\n      footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\r\n      >\r\n\r\n        <div className=\"map-container\">\r\n          <Map center={props.coordinates} zoom={16}/>\r\n        </div>  \r\n      </Modal>\r\n\r\n      <Modal \r\n        show={showConfirmModal}\r\n        onCancel={cancelDeleteHandler}\r\n        header=\"Are you sure?\" \r\n        footerClass=\"place-item__modal-actions\" \r\n        footer={\r\n      <React.Fragment>\r\n        <Button inverse onClick={cancelDeleteHandler}>CANCEL</Button>\r\n        <Button danger onClick={confirmDeleteHandler}>DELETE</Button>\r\n      </React.Fragment>\r\n     }\r\n      >\r\n        <p>Do you want to proceed and delete this place? Please note that is can't be undone thereafter.</p>\r\n      </Modal>\r\n\r\n    <li className=\"place-item\">\r\n    <Card className=\"place-item__content\">\r\n      <div className=\"place-item__image\">\r\n        <img src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`} alt={props.title} />\r\n      </div>\r\n      <div className=\"place-item__info\">\r\n        <h2>{props.title}</h2>\r\n        <h3>{props.address}</h3>\r\n        <p>{props.description}</p>\r\n      </div>\r\n      <div className=\"place-item__actions\">\r\n        <Button inverse onClick={openMapHandler}>VIEW ON MAP</Button>\r\n        { (auth.userId === props.creatorId ) && (\r\n           <Button to={`/places/${props.id}`}>EDIT</Button>\r\n           )}\r\n        { (auth.userId === props.creatorId) && (  \r\n          <Button danger onClick={showDeleteWarningHandler}>DELETE</Button>\r\n          )}\r\n          </div>\r\n    </Card>\r\n  </li>\r\n    </React.Fragment>\r\n);\r\n};\r\n\r\nexport default PlaceItem;","import React from 'react';\r\n\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport './PlaceList.css';\r\nimport PlaceItem from './PlaceItem';\r\nimport Button from '../../shared/components/FormElements/Button';\r\n\r\nconst PlaceList = props => {\r\n  if (props.items.length === 0) {\r\n    return (\r\n      <div className=\"place-list center\">\r\n        <Card>\r\n          <h2>No places found. Maybe create one?</h2>\r\n          <Button to=\"/places/new\">Share Place </Button>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (<ul className=\"place-list\">\r\n    {props.items.map(place => <PlaceItem\r\n      key={place.id}\r\n      id={place.id}\r\n      image={place.image}\r\n      title={place.title}\r\n      description={place.description}\r\n      address={place.address}\r\n      creatorId={place.creator}\r\n      coordinates={place.location}\r\n      onDelete={props.onDeletePlace}\r\n    />)\r\n    }\r\n  </ul>\r\n    );\r\n};\r\n\r\nexport default PlaceList;","import React, { useEffect, useState } from 'react';\r\nimport PlaceList from '../components/PlaceList';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useHttpClient } from '../../shared/components/hooks/http-hook';\r\nconst UserPlaces = props => {\r\n  const [loadedPlaces, setLoadedPlaces] = useState();\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const userId = useParams().userId;\r\n\r\n  useEffect(() => {\r\n    const fetchPlaces = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`);\r\n        setLoadedPlaces(responseData.places);\r\n      } catch (err) {}\r\n    }\r\n    fetchPlaces();\r\n  }, [sendRequest, userId]); \r\n\r\n  const placeDeleteHandler = (deletedPlaceId) => {\r\n    setLoadedPlaces(prevPlaces =>\r\n       prevPlaces.filter(place => place.id !== deletedPlaceId)\r\n    )\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && <div className=\"center\"><LoadingSpinner/> </div> }\r\n      {!isLoading && loadedPlaces && <PlaceList items={loadedPlaces} onDeletePlace={placeDeleteHandler}/> }\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default UserPlaces;"],"sourceRoot":""}